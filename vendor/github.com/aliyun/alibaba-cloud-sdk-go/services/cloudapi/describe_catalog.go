package cloudapi

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeCatalog invokes the cloudapi.DescribeCatalog API synchronously
// api document: https://help.aliyun.com/api/cloudapi/describecatalog.html
func (client *Client) DescribeCatalog(request *DescribeCatalogRequest) (response *DescribeCatalogResponse, err error) {
	response = CreateDescribeCatalogResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeCatalogWithChan invokes the cloudapi.DescribeCatalog API asynchronously
// api document: https://help.aliyun.com/api/cloudapi/describecatalog.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeCatalogWithChan(request *DescribeCatalogRequest) (<-chan *DescribeCatalogResponse, <-chan error) {
	responseChan := make(chan *DescribeCatalogResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeCatalog(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeCatalogWithCallback invokes the cloudapi.DescribeCatalog API asynchronously
// api document: https://help.aliyun.com/api/cloudapi/describecatalog.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeCatalogWithCallback(request *DescribeCatalogRequest, callback func(response *DescribeCatalogResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeCatalogResponse
		var err error
		defer close(result)
		response, err = client.DescribeCatalog(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeCatalogRequest is the request struct for api DescribeCatalog
type DescribeCatalogRequest struct {
	*requests.RpcRequest
	CatalogId string `position:"Query" name:"CatalogId"`
}

// DescribeCatalogResponse is the response struct for api DescribeCatalog
type DescribeCatalogResponse struct {
	*responses.BaseResponse
	RequestId    string `json:"RequestId" xml:"RequestId"`
	CatalogId    string `json:"CatalogId" xml:"CatalogId"`
	CatalogName  string `json:"CatalogName" xml:"CatalogName"`
	Description  string `json:"Description" xml:"Description"`
	ParentId     string `json:"ParentId" xml:"ParentId"`
	CreatedTime  string `json:"CreatedTime" xml:"CreatedTime"`
	ModifiedTime string `json:"ModifiedTime" xml:"ModifiedTime"`
	RegionId     string `json:"RegionId" xml:"RegionId"`
	ApiIds       ApiIds `json:"ApiIds" xml:"ApiIds"`
}

// CreateDescribeCatalogRequest creates a request to invoke DescribeCatalog API
func CreateDescribeCatalogRequest() (request *DescribeCatalogRequest) {
	request = &DescribeCatalogRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("CloudAPI", "2016-07-14", "DescribeCatalog", "apigateway", "openAPI")
	return
}

// CreateDescribeCatalogResponse creates a response to parse from DescribeCatalog response
func CreateDescribeCatalogResponse() (response *DescribeCatalogResponse) {
	response = &DescribeCatalogResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
