package cdn

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeLiveStreamFrameInfo invokes the cdn.DescribeLiveStreamFrameInfo API synchronously
// api document: https://help.aliyun.com/api/cdn/describelivestreamframeinfo.html
func (client *Client) DescribeLiveStreamFrameInfo(request *DescribeLiveStreamFrameInfoRequest) (response *DescribeLiveStreamFrameInfoResponse, err error) {
	response = CreateDescribeLiveStreamFrameInfoResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeLiveStreamFrameInfoWithChan invokes the cdn.DescribeLiveStreamFrameInfo API asynchronously
// api document: https://help.aliyun.com/api/cdn/describelivestreamframeinfo.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeLiveStreamFrameInfoWithChan(request *DescribeLiveStreamFrameInfoRequest) (<-chan *DescribeLiveStreamFrameInfoResponse, <-chan error) {
	responseChan := make(chan *DescribeLiveStreamFrameInfoResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeLiveStreamFrameInfo(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeLiveStreamFrameInfoWithCallback invokes the cdn.DescribeLiveStreamFrameInfo API asynchronously
// api document: https://help.aliyun.com/api/cdn/describelivestreamframeinfo.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeLiveStreamFrameInfoWithCallback(request *DescribeLiveStreamFrameInfoRequest, callback func(response *DescribeLiveStreamFrameInfoResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeLiveStreamFrameInfoResponse
		var err error
		defer close(result)
		response, err = client.DescribeLiveStreamFrameInfo(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeLiveStreamFrameInfoRequest is the request struct for api DescribeLiveStreamFrameInfo
type DescribeLiveStreamFrameInfoRequest struct {
	*requests.RpcRequest
	AppName       string           `position:"Query" name:"AppName"`
	SecurityToken string           `position:"Query" name:"SecurityToken"`
	DomainName    string           `position:"Query" name:"DomainName"`
	EndTime       string           `position:"Query" name:"EndTime"`
	StartTime     string           `position:"Query" name:"StartTime"`
	OwnerId       requests.Integer `position:"Query" name:"OwnerId"`
	StreamName    string           `position:"Query" name:"StreamName"`
}

// DescribeLiveStreamFrameInfoResponse is the response struct for api DescribeLiveStreamFrameInfo
type DescribeLiveStreamFrameInfoResponse struct {
	*responses.BaseResponse
	RequestId      string         `json:"RequestId" xml:"RequestId"`
	FrameDataInfos FrameDataInfos `json:"FrameDataInfos" xml:"FrameDataInfos"`
}

// CreateDescribeLiveStreamFrameInfoRequest creates a request to invoke DescribeLiveStreamFrameInfo API
func CreateDescribeLiveStreamFrameInfoRequest() (request *DescribeLiveStreamFrameInfoRequest) {
	request = &DescribeLiveStreamFrameInfoRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Cdn", "2014-11-11", "DescribeLiveStreamFrameInfo", "", "")
	return
}

// CreateDescribeLiveStreamFrameInfoResponse creates a response to parse from DescribeLiveStreamFrameInfo response
func CreateDescribeLiveStreamFrameInfoResponse() (response *DescribeLiveStreamFrameInfoResponse) {
	response = &DescribeLiveStreamFrameInfoResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
