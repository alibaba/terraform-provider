package cdn

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeLiveStreamPushErrors invokes the cdn.DescribeLiveStreamPushErrors API synchronously
// api document: https://help.aliyun.com/api/cdn/describelivestreampusherrors.html
func (client *Client) DescribeLiveStreamPushErrors(request *DescribeLiveStreamPushErrorsRequest) (response *DescribeLiveStreamPushErrorsResponse, err error) {
	response = CreateDescribeLiveStreamPushErrorsResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeLiveStreamPushErrorsWithChan invokes the cdn.DescribeLiveStreamPushErrors API asynchronously
// api document: https://help.aliyun.com/api/cdn/describelivestreampusherrors.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeLiveStreamPushErrorsWithChan(request *DescribeLiveStreamPushErrorsRequest) (<-chan *DescribeLiveStreamPushErrorsResponse, <-chan error) {
	responseChan := make(chan *DescribeLiveStreamPushErrorsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeLiveStreamPushErrors(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeLiveStreamPushErrorsWithCallback invokes the cdn.DescribeLiveStreamPushErrors API asynchronously
// api document: https://help.aliyun.com/api/cdn/describelivestreampusherrors.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeLiveStreamPushErrorsWithCallback(request *DescribeLiveStreamPushErrorsRequest, callback func(response *DescribeLiveStreamPushErrorsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeLiveStreamPushErrorsResponse
		var err error
		defer close(result)
		response, err = client.DescribeLiveStreamPushErrors(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeLiveStreamPushErrorsRequest is the request struct for api DescribeLiveStreamPushErrors
type DescribeLiveStreamPushErrorsRequest struct {
	*requests.RpcRequest
	SecurityToken string           `position:"Query" name:"SecurityToken"`
	DomainName    string           `position:"Query" name:"DomainName"`
	EndTime       string           `position:"Query" name:"EndTime"`
	StartTime     string           `position:"Query" name:"StartTime"`
	OwnerId       requests.Integer `position:"Query" name:"OwnerId"`
}

// DescribeLiveStreamPushErrorsResponse is the response struct for api DescribeLiveStreamPushErrors
type DescribeLiveStreamPushErrorsResponse struct {
	*responses.BaseResponse
	RequestId           string              `json:"RequestId" xml:"RequestId"`
	PushErrorsModelList PushErrorsModelList `json:"PushErrorsModelList" xml:"PushErrorsModelList"`
}

// CreateDescribeLiveStreamPushErrorsRequest creates a request to invoke DescribeLiveStreamPushErrors API
func CreateDescribeLiveStreamPushErrorsRequest() (request *DescribeLiveStreamPushErrorsRequest) {
	request = &DescribeLiveStreamPushErrorsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Cdn", "2014-11-11", "DescribeLiveStreamPushErrors", "", "")
	return
}

// CreateDescribeLiveStreamPushErrorsResponse creates a response to parse from DescribeLiveStreamPushErrors response
func CreateDescribeLiveStreamPushErrorsResponse() (response *DescribeLiveStreamPushErrorsResponse) {
	response = &DescribeLiveStreamPushErrorsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
