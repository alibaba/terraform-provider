package cdn

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeExtensiveDomainData invokes the cdn.DescribeExtensiveDomainData API synchronously
// api document: https://help.aliyun.com/api/cdn/describeextensivedomaindata.html
func (client *Client) DescribeExtensiveDomainData(request *DescribeExtensiveDomainDataRequest) (response *DescribeExtensiveDomainDataResponse, err error) {
	response = CreateDescribeExtensiveDomainDataResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeExtensiveDomainDataWithChan invokes the cdn.DescribeExtensiveDomainData API asynchronously
// api document: https://help.aliyun.com/api/cdn/describeextensivedomaindata.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeExtensiveDomainDataWithChan(request *DescribeExtensiveDomainDataRequest) (<-chan *DescribeExtensiveDomainDataResponse, <-chan error) {
	responseChan := make(chan *DescribeExtensiveDomainDataResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeExtensiveDomainData(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeExtensiveDomainDataWithCallback invokes the cdn.DescribeExtensiveDomainData API asynchronously
// api document: https://help.aliyun.com/api/cdn/describeextensivedomaindata.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeExtensiveDomainDataWithCallback(request *DescribeExtensiveDomainDataRequest, callback func(response *DescribeExtensiveDomainDataResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeExtensiveDomainDataResponse
		var err error
		defer close(result)
		response, err = client.DescribeExtensiveDomainData(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeExtensiveDomainDataRequest is the request struct for api DescribeExtensiveDomainData
type DescribeExtensiveDomainDataRequest struct {
	*requests.RpcRequest
	SecurityToken   string           `position:"Query" name:"SecurityToken"`
	ExtensiveDomain string           `position:"Query" name:"ExtensiveDomain"`
	PageSize        requests.Integer `position:"Query" name:"PageSize"`
	EndTime         string           `position:"Query" name:"EndTime"`
	StartTime       string           `position:"Query" name:"StartTime"`
	OwnerId         requests.Integer `position:"Query" name:"OwnerId"`
	PageNumber      requests.Integer `position:"Query" name:"PageNumber"`
}

// DescribeExtensiveDomainDataResponse is the response struct for api DescribeExtensiveDomainData
type DescribeExtensiveDomainDataResponse struct {
	*responses.BaseResponse
	RequestId       string                                       `json:"RequestId" xml:"RequestId"`
	ExtensiveDomain string                                       `json:"ExtensiveDomain" xml:"ExtensiveDomain"`
	DataInterval    string                                       `json:"DataInterval" xml:"DataInterval"`
	StartTime       string                                       `json:"StartTime" xml:"StartTime"`
	EndTime         string                                       `json:"EndTime" xml:"EndTime"`
	PageNumber      string                                       `json:"PageNumber" xml:"PageNumber"`
	TotalCount      string                                       `json:"TotalCount" xml:"TotalCount"`
	PageSize        string                                       `json:"PageSize" xml:"PageSize"`
	DataPerInterval DataPerIntervalInDescribeExtensiveDomainData `json:"DataPerInterval" xml:"DataPerInterval"`
}

// CreateDescribeExtensiveDomainDataRequest creates a request to invoke DescribeExtensiveDomainData API
func CreateDescribeExtensiveDomainDataRequest() (request *DescribeExtensiveDomainDataRequest) {
	request = &DescribeExtensiveDomainDataRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Cdn", "2014-11-11", "DescribeExtensiveDomainData", "", "")
	return
}

// CreateDescribeExtensiveDomainDataResponse creates a response to parse from DescribeExtensiveDomainData response
func CreateDescribeExtensiveDomainDataResponse() (response *DescribeExtensiveDomainDataResponse) {
	response = &DescribeExtensiveDomainDataResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
